name: 'Build and Push Docker Image'
description: 'Builds and pushes a Docker image to GitHub Container Registry with caching and security scanning'

inputs:
  image_name:
    description: 'Name of the Docker image'
    required: true
  tag:
    description: 'Tag for the Docker image (e.g., commit SHA or version)'
    required: true
  context:
    description: 'Build context path'
    required: false
    default: '.'
  dockerfile:
    description: 'Path to Dockerfile'
    required: false
    default: 'Dockerfile'
  registry:
    description: 'Container registry'
    required: false
    default: 'ghcr.io'
  push:
    description: 'Whether to push the image'
    required: false
    default: 'true'
  scan_image:
    description: 'Whether to scan the image for vulnerabilities'
    required: false
    default: 'true'

outputs:
  image:
    description: 'Full image name with tag'
    value: ${{ steps.meta.outputs.tags }}
  digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  metadata:
    description: 'Build result metadata'
    value: ${{ steps.build.outputs.metadata }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Log in to Container Registry
      if: inputs.push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ github.repository }}/${{ inputs.image_name }}
        tags: |
          type=raw,value=${{ inputs.tag }}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        labels: |
          org.opencontainers.image.title=${{ inputs.image_name }}
          org.opencontainers.image.description=SprintSense ${{ inputs.image_name }}
          org.opencontainers.image.vendor=SprintSense
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.repository.pushed_at }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.context }}/${{ inputs.dockerfile }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        provenance: true
        sbom: true
        outputs: |
          type=image,name=${{ inputs.registry }}/${{ github.repository }}/${{ inputs.image_name }},push=${{ inputs.push }}
          type=docker,dest=/tmp/${{ inputs.image_name }}-${{ inputs.tag }}.tar

    - name: Upload build artifact
      if: inputs.push == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.image_name }}-${{ inputs.tag }}
        path: /tmp/${{ inputs.image_name }}-${{ inputs.tag }}.tar
        retention-days: 1

    - name: Scan Docker image for vulnerabilities
      if: inputs.scan_image == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results-${{ inputs.image_name }}.sarif'

    - name: Upload Trivy scan results
      if: inputs.scan_image == 'true'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ inputs.image_name }}.sarif'
        category: ${{ inputs.image_name }}-security

    - name: Create image summary
      shell: bash
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Image** | \`${{ steps.meta.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Digest** | \`${{ steps.build.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Context** | \`${{ inputs.context }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Dockerfile** | \`${{ inputs.dockerfile }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Pushed** | ${{ inputs.push }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Scanned** | ${{ inputs.scan_image }} |" >> $GITHUB_STEP_SUMMARY