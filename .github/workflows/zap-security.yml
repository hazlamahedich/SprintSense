name: ZAP Security Scan

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'tests/security/**'
      - '.github/workflows/zap-security.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'tests/security/**'
      - '.github/workflows/zap-security.yml'
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:

env:
  POETRY_VERSION: "1.7.1"
  PYTHON_VERSION: "3.9"

jobs:
  zap_scan:
    name: ZAP Security Scan
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Start API server
        run: |
          poetry run python -m pytest tests/conftest.py --fixture=test_db
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 5  # Wait for server to start

      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          format: 'openapi'
          target: 'http://localhost:8000/api/v1/openapi.json'
          rules_file_name: './tests/security/zap-api-scan.yaml'
          cmd_options: '-z "-configfile tests/security/zap-api-scan.yaml"'

      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: report/
          retention-days: 30

      - name: Create Issue From File
        if: failure() && github.event_name != 'pull_request'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: ZAP Scan Alert
          content-filepath: ./zap-alert.md
          labels: security, needs-triage